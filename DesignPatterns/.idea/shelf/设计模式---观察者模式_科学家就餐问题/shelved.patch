Index: src/com/mashibing/observer/v3/Dad.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v3/Dad.java	(date 1605001250628)
+++ src/com/mashibing/observer/v3/Dad.java	(date 1605001250628)
@@ -0,0 +1,13 @@
+package com.mashibing.observer.v3;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Dad {
+    public void feed() {
+        System.out.println("dad feeding...");
+    }
+}
Index: src/com/mashibing/philosohperfeed/DeadLock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/philosohperfeed/DeadLock.java	(date 1605001250638)
+++ src/com/mashibing/philosohperfeed/DeadLock.java	(date 1605001250638)
@@ -0,0 +1,55 @@
+package com.mashibing.philosohperfeed;
+
+/**
+ * @description :科学家就餐问题
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class DeadLock {
+    public static void main(String[] args) {
+        ChopStick cs0 = new ChopStick();
+        ChopStick cs1 = new ChopStick();
+        ChopStick cs2 = new ChopStick();
+        ChopStick cs3 = new ChopStick();
+        ChopStick cs4 = new ChopStick();
+
+        Philosohper p0 = new Philosohper("p0",0,cs0,cs1);
+        Philosohper p1 = new Philosohper("p1",1,cs1,cs2);
+        Philosohper p2 = new Philosohper("p2",2,cs2,cs3);
+        Philosohper p3 = new Philosohper("p3",3,cs3,cs4);
+        Philosohper p4 = new Philosohper("p4",4,cs4,cs0);
+
+        p0.start();
+        p1.start();
+        p2.start();
+        p3.start();
+        p4.start();
+    }
+
+    public static class Philosohper extends Thread {
+        private ChopStick left, right;
+        private int index;
+
+        public Philosohper (String name, int index, ChopStick left, ChopStick right) {
+            this.setName(name);
+            this.index = index;
+            this.left = left;
+            this.right = right;
+        }
+
+        @Override
+        public void run ()  {
+            synchronized (left)  {
+                try {
+                    this.sleep(1000 + index * 1000);
+                    synchronized (right) {
+                        this.sleep(1000);
+                    }
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+}
Index: src/com/mashibing/observer/v6/Main6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v6/Main6.java	(date 1605001250636)
+++ src/com/mashibing/observer/v6/Main6.java	(date 1605001250636)
@@ -0,0 +1,92 @@
+package com.mashibing.observer.v6;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+
+class Child {
+    private boolean cry = false;
+    private List<Observer> observers = new ArrayList<>();
+
+    {
+        observers.add(new Dad());
+        observers.add(new Mum());
+        observers.add(new Dog());
+    }
+
+    public boolean isCry() {
+        return cry;
+    }
+
+    public void wakeup() {
+        cry = true;
+
+        wakeUpEvent event = new wakeUpEvent(System.currentTimeMillis(), "bed");
+
+        for (Observer o : observers) {
+            o.actionOnWakeUp(event);
+        }
+    }
+
+}
+
+//事件类 fire Event
+class wakeUpEvent {
+    long timestamp;
+    String loc;
+
+    public wakeUpEvent(long timestamp, String loc) {
+        this.timestamp = timestamp;
+        this.loc = loc;
+    }
+}
+
+interface Observer {
+    void actionOnWakeUp(wakeUpEvent event);
+}
+
+class Dad implements Observer {
+    public void feed () {
+        System.out.println("dad feeding...");
+    }
+
+    @Override
+    public void actionOnWakeUp(wakeUpEvent event) {
+        feed();
+    }
+}
+
+class Mum implements Observer {
+    public void hug () {
+        System.out.println("mum hugging...");
+    }
+
+    @Override
+    public void actionOnWakeUp(wakeUpEvent event) {
+        hug();
+    }
+}
+
+class Dog implements Observer {
+    public void wang () {
+        System.out.println("dog wang...");
+    }
+
+    @Override
+    public void actionOnWakeUp(wakeUpEvent event) {
+        wang();
+    }
+}
+
+public class Main6 {
+    public static void main(String[] args) {
+        Child c = new Child();
+        c.wakeup();
+    }
+}
Index: src/com/mashibing/observer/v4/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v4/Main.java	(date 1605001250633)
+++ src/com/mashibing/observer/v4/Main.java	(date 1605001250633)
@@ -0,0 +1,14 @@
+package com.mashibing.observer.v4;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Main {
+    public static void main(String[] args) {
+        Child child = new Child();
+        child.wakeup();
+    }
+}
Index: src/com/mashibing/observer/v4/Child.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v4/Child.java	(date 1605001250630)
+++ src/com/mashibing/observer/v4/Child.java	(date 1605001250630)
@@ -0,0 +1,27 @@
+package com.mashibing.observer.v4;
+
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Child {
+    private boolean cry = false;
+    private Dad dad = new Dad();
+    private Mum mum = new Mum();
+    private Dog dog = new Dog();
+
+    public boolean isCry() {
+        return cry;
+    }
+
+    public void wakeup() {
+        cry = true;
+        dad.feed();
+        dog.wang();
+        mum.hug();
+    }
+
+}
Index: src/com/mashibing/observer/v5/Main5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v5/Main5.java	(date 1605001250635)
+++ src/com/mashibing/observer/v5/Main5.java	(date 1605001250635)
@@ -0,0 +1,78 @@
+package com.mashibing.observer.v5;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+
+class Child {
+    private boolean cry = false;
+    private List<Observer> observers = new ArrayList<>();
+
+    {
+        observers.add(new Dad());
+        observers.add(new Mum());
+        observers.add(new Dog());
+    }
+
+    public boolean isCry() {
+        return cry;
+    }
+
+    public void wakeup() {
+        cry = true;
+        for (Observer o : observers) {
+            o.actionOnWakeUp();
+        }
+    }
+
+}
+
+interface Observer {
+    void actionOnWakeUp();
+}
+
+class Dad implements Observer {
+    public void feed () {
+        System.out.println("dad feeding...");
+    }
+
+    @Override
+    public void actionOnWakeUp() {
+        feed();
+    }
+}
+
+class Mum implements Observer {
+    public void hug () {
+        System.out.println("mum hugging...");
+    }
+
+    @Override
+    public void actionOnWakeUp() {
+        hug();
+    }
+}
+
+class Dog implements Observer {
+    public void wang () {
+        System.out.println("dog wang...");
+    }
+
+    @Override
+    public void actionOnWakeUp() {
+        wang();
+    }
+}
+
+public class Main5 {
+    public static void main(String[] args) {
+        Child c = new Child();
+        c.wakeup();
+    }
+}
Index: src/com/mashibing/observer/v3/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v3/Main.java	(date 1605001250629)
+++ src/com/mashibing/observer/v3/Main.java	(date 1605001250629)
@@ -0,0 +1,14 @@
+package com.mashibing.observer.v3;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Main {
+    public static void main(String[] args) {
+        Child child = new Child();
+        child.wakeup();
+    }
+}
Index: src/com/mashibing/observer/v4/Dad.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v4/Dad.java	(date 1605001250631)
+++ src/com/mashibing/observer/v4/Dad.java	(date 1605001250631)
@@ -0,0 +1,13 @@
+package com.mashibing.observer.v4;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Dad {
+    public void feed() {
+        System.out.println("dad feeding...");
+    }
+}
Index: src/com/mashibing/observer/v2/Child.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v2/Child.java	(date 1605001250625)
+++ src/com/mashibing/observer/v2/Child.java	(date 1605001250625)
@@ -0,0 +1,21 @@
+package com.mashibing.observer.v2;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+ class Child {
+    private boolean cry = false;
+
+    public boolean isCry() {
+        return cry;
+    }
+
+    public void wakeup() {
+        System.out.println("Wake Up! Crying wuwuwuwuwu...");
+        cry = true;
+    }
+
+}
Index: src/com/mashibing/philosohperfeed/DeadLockOpen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/philosohperfeed/DeadLockOpen.java	(date 1605001250639)
+++ src/com/mashibing/philosohperfeed/DeadLockOpen.java	(date 1605001250639)
@@ -0,0 +1,70 @@
+package com.mashibing.philosohperfeed;
+
+/**
+ * @description :科学家就餐问题
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class DeadLockOpen {
+    public static void main(String[] args) {
+        ChopStick cs0 = new ChopStick();
+        ChopStick cs1 = new ChopStick();
+        ChopStick cs2 = new ChopStick();
+        ChopStick cs3 = new ChopStick();
+        ChopStick cs4 = new ChopStick();
+
+        Philosohper p0 = new Philosohper("p0",0,cs0,cs1);
+        Philosohper p1 = new Philosohper("p1",1,cs1,cs2);
+        Philosohper p2 = new Philosohper("p2",2,cs2,cs3);
+        Philosohper p3 = new Philosohper("p3",3,cs3,cs4);
+        Philosohper p4 = new Philosohper("p4",4,cs4,cs0);
+
+        p0.start();
+        p1.start();
+        p2.start();
+        p3.start();
+        p4.start();
+    }
+
+    public static class Philosohper extends Thread {
+        private ChopStick left, right;
+        private int index;
+
+        public Philosohper (String name, int index, ChopStick left, ChopStick right) {
+            this.setName(name);
+            this.index = index;
+            this.left = left;
+            this.right = right;
+        }
+
+        @Override
+        public void run ()  {
+            if (index == 0) {
+                synchronized (left)  {
+                    try {
+                        this.sleep(1000 + index * 1000);
+                        synchronized (right) {
+                            this.sleep(1000);
+                            System.out.println(index + "吃完了！");
+                        }
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }else {
+                synchronized (right)  {
+                    try {
+                        this.sleep(1000 + index * 1000);
+                        synchronized (left) {
+                            this.sleep(1000);
+                            System.out.println(index + "吃完了！");
+                        }
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+        }
+    }
+}
Index: src/com/mashibing/observer/v2/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v2/Main.java	(date 1605001250626)
+++ src/com/mashibing/observer/v2/Main.java	(date 1605001250626)
@@ -0,0 +1,21 @@
+package com.mashibing.observer.v2;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Main {
+    public static void main(String[] args) {
+        Child child = new Child();
+        while (!child.isCry()) {
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+            System.out.println("observer...");
+        }
+    }
+}
Index: src/com/mashibing/observer/v1/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v1/Main1.java	(date 1605001250623)
+++ src/com/mashibing/observer/v1/Main1.java	(date 1605001250623)
@@ -0,0 +1,18 @@
+package com.mashibing.observer.v1;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Main1 {
+    public static void main(String[] args) {
+        boolean cry = false;
+
+        while (!cry) {
+            //进行处理
+
+        }
+    }
+}
Index: src/com/mashibing/observer/v4/Mum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v4/Mum.java	(date 1605001250633)
+++ src/com/mashibing/observer/v4/Mum.java	(date 1605001250633)
@@ -0,0 +1,13 @@
+package com.mashibing.observer.v4;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Mum {
+    public void hug() {
+        System.out.println("Mum hugging....");
+    }
+}
Index: src/com/mashibing/observer/v3/Child.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v3/Child.java	(date 1605001250627)
+++ src/com/mashibing/observer/v3/Child.java	(date 1605001250627)
@@ -0,0 +1,22 @@
+package com.mashibing.observer.v3;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Child {
+    private boolean cry = false;
+    private Dad d = new Dad();
+
+    public boolean isCry() {
+        return cry;
+    }
+
+    public void wakeup() {
+        cry = true;
+        d.feed();
+    }
+
+}
Index: src/com/mashibing/philosohperfeed/ChopStick.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/philosohperfeed/ChopStick.java	(date 1605001250637)
+++ src/com/mashibing/philosohperfeed/ChopStick.java	(date 1605001250637)
@@ -0,0 +1,10 @@
+package com.mashibing.philosohperfeed;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class ChopStick {
+}
Index: src/com/mashibing/observer/v4/Dog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/mashibing/observer/v4/Dog.java	(date 1605001250632)
+++ src/com/mashibing/observer/v4/Dog.java	(date 1605001250632)
@@ -0,0 +1,14 @@
+package com.mashibing.observer.v4;
+
+/**
+ * @description :
+ * @author：jty
+ * @date: 2020-11-10
+ * @sine: 0.0.1
+ */
+public class Dog {
+    public void wang() {
+        System.out.println("Wang Wang Wang...");
+    }
+
+}
